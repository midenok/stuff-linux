[advice]
	resolveConflict = false
[cmake]
	update-submodules = no
[user]
	email = midenok@gmail.com
	name = Aleksey Midenkov
[push]
	default = simple
	recurseSubmodules = no
[pull]
	rebase = true
[fetch]
	recurseSubmodules = on-demand
[submodule]
	recurse = true
[status]
	submoduleSummary = 0
[diff]
	ignoreSubmodules = all
[branch]
	autosetuprebase = always
[merge]
#	conflictstyle = diff3
[alias]
	co = checkout
	br = branch
	ci = commit
	sm = submodule
	s = show --pretty=oneline
	d = diff --pretty=oneline
	contains = branch -r --contains
	cdiff = diff --cached
	st = status -s -uno
	stat = show --ignore-submodules=none --stat
	cstat = "!git --no-pager diff --name-only --diff-filter=U |xargs grep -c '^=======$'"
	modified = "!f() { git st|grep '^ M '|while read a b; do echo "$b"; done; }; f"
	unstage = reset HEAD --
	last = log -1 HEAD
	msg = show -s --format=%B
	symref = symbolic-ref
	rbi = "!f() { unset a; [ -z \"$*\" ] && a=HEAD~~~~~~~~~~~~~~~~~~; git rebase -i $a \"$@\"; }; f"
	cp = cherry-pick
	src = rev-parse --show-toplevel
	pbr = rev-parse --abbrev-ref HEAD
	recent = for-each-ref --sort=-committerdate --count=30 --format='%(refname:short)' refs/heads/
	touch = commit --amend --no-edit --date=now
	back = "!f() { \
		wb=$(git pbr); \
		eval `git for-each-ref --sort=-committerdate --count=1 --format='back=%(refname:short)' refs/heads/`; \
		if [ "$wb" = "$back" ]; then \
			eval `git for-each-ref --sort=-committerdate --count=2 --format='back=%(refname:short)' refs/heads/`; \
		fi; \
		git checkout $back; }; f"
	prb = rev-parse --abbrev-ref --symbolic-full-name @{u}
	pr = "!f() { \
		wb=$(git pbr); \
		rb=$(git prb); \
		echo ${rb%/$wb}; }; f"
	rename = "!f() { \
		src=$1; dst=$2; \
		set -e; \
		git checkout $src; \
		git pull; \
		remote=$(git pr); \
		git checkout -b renamed/$src; \
		git checkout -b $dst; \
		git push -u $remote $dst; \
		git br -D $src; \
		git push $remote --delete $src; }; f"
	cont = "!f() { \
		s=$(git status|head -n1); \
		if echo $s|grep -q ' rebase '; then \
			git rebase --continue; \
		fi;}; f"
	orig = "!f() { \
		d=$(git src)/.git/rebase-apply; \
		if [ -d $d ]; then \
			git show $(cat $d/original-commit); \
		else \
			echo No rebase in progress? >&2; \
			exit 1; \
		fi;}; f"
	rrr = rerere
	forget = rerere forget
	bothmod = "!git diff --name-only|uniq && true"
	con = checkout --conflict=merge
	conall = "!git con $(git bothmod) && true"
	con3 = checkout --conflict=diff3
	showcon = "!git con $(git bothmod) && git diff && git rerere && true"
	amend = commit --amend
	abort = rebase --abort
	skip = rebase --skip
	upd = "!f() { git fetch -f origin $1:$1; }; f"
	pushb = "!f() { git push -u origin $(git pbr); }; f"
	pushf2 = push --force-with-lease
	pushf = "!f() { \
		if ! ourl=$(git remote get-url origin); then \
			return $?; \
		fi; \
		if ! curl=$(git remote get-url check 2>/dev/null); then \
			git remote add check $ourl; \
		elif [ "$ourl" != "$curl" ]; then \
			echo "Remotes URL 'origin' and 'check' must match!" >&2; \
			return 3; \
		fi; \
		br=$(git rev-parse --abbrev-ref HEAD); \
		rbr=$(git rev-parse --abbrev-ref --symbolic-full-name @{u}); \
		git fetch check && ( \
			ch=$(git log ${rbr}..check/${br}); \
			if [ -z \"$ch\" ]; then \
				git push -f; \
			else \
				echo \"$ch\"; \
				return 2; \
			fi) \
		}; f"
	desub = "!f() { \
		git show --ignore-submodules=none --submodule=short \
			--diff-filter=M -G'^Subproject commit' --no-color --format= | \
		grep '^-' | \
		while read x module; \
		do \
			cd \"$(git rev-parse --show-toplevel)\"; \
			read x y hash; \
			module=\"${module##a/}\"; \
			( cd \"$module\"; git checkout $hash ); \
			git commit --amend --no-edit \"$module\"; \
			echo \"Fixed $module to $hash\"; \
		done; \
		}; f"
	fork-point = merge-base --fork-point
	rbo = "!f() { git rebase --onto $1 $(git fork-point $1); }; f"
	bad = bisect bad
	good = bisect good
	current = !git show `cat .git/rebase-merge/stopped-sha`
	su = submodule update
	glog = log --graph
	find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
	show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"
[rerere]
	enabled = true
[gc]
	rerereresolved = 180
	rerereunresolved = 60
	quiet = 1
[cola]
	spellcheck = false
[log]
	abbrevCommit = true
[pager]
	s = "sed 's/\\x1b\\[[0-9;]*m//g'|filterdiff --annotate|colordiff|less -FRX"
	d = "sed 's/\\x1b\\[[0-9;]*m//g'|filterdiff --annotate|colordiff|less -FRX"
